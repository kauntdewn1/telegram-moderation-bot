import logging
import os
from telegram import Update, ChatPermissions, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, filters

# Mensagem de boas-vindas com bot√µes interativos
async def boas_vindas(update: Update, context: CallbackContext) -> None:
    for user in update.message.new_chat_members:
        keyboard = [
            [InlineKeyboardButton("üìú Regras do Grupo", callback_data="regras")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"üéâ Bem-vindo, {user.first_name}! üöÄ\n\n"
            "Aqui est√£o algumas informa√ß√µes importantes para voc√™ come√ßar:",
            reply_markup=reply_markup
        )


# Handler de boas-vindas ao grupo
app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, boas_vindas))

# Fun√ß√£o para responder ao bot√£o das regras
async def botao_clicado(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    if query.data == "regras":
        await query.message.reply_text("üìú **Regras do Grupo:**\n1. Respeite todos.\n2. Sem spam.\n3. Seja ativo!")

# Lista de palavras proibidas (adapte conforme necess√°rio)
PALAVRAS_PROIBIDAS = ["spam", "scam", "fraude", "clique aqui", "dinheiro f√°cil"]

# Fun√ß√£o de verifica√ß√£o de mensagens (AntiSpam)
async def verificar_mensagem(update: Update, context: CallbackContext) -> None:
    mensagem = update.message.text.lower()
    palavras_proibidas = ["spam", "fraude", "dinheiro f√°cil"]

    if any(palavra in mensagem for palavra in palavras_proibidas):
        await update.message.delete()
        await update.message.reply_text(f"‚ö†Ô∏è {update.message.from_user.first_name}, sua mensagem foi removida por conter conte√∫do proibido!")

            # Se a mensagem cont√©m links e n√£o √© de um admin, remove
    if "http" in mensagem or ".com" in mensagem:
        chat_member = await context.bot.get_chat_member(update.effective_chat.id, update.effective_user.id)
        if chat_member.status not in ["administrator", "creator"]:
            await update.message.delete()
            await update.message.reply_text(f"üö´ {update.message.from_user.first_name}, links n√£o s√£o permitidos no grupo!")
            
            # Adicionar filtro de mensagens no `iniciar_bot`
app.add_handler(MessageHandler(filters.TEXT & ~filters.Command(), verificar_mensagem))

# Verifica se o usu√°rio que enviou o comando √© admin
async def is_admin(update: Update) -> bool:
    chat_member = await update.effective_chat.get_member(update.effective_user.id)
    return chat_member.status in ["administrator", "creator"]

# /ban - Banir um usu√°rio (somente admin)
async def ban(update: Update, context: CallbackContext) -> None:
    if not await is_admin(update):
        await update.message.reply_text("‚ö†Ô∏è Voc√™ n√£o tem permiss√£o para usar este comando.")
        return

    if not context.args:
        await update.message.reply_text("‚ùå Voc√™ precisa marcar um usu√°rio ou informar um ID para banir.")
        return

    try:
        user_id = int(context.args[0])
        await context.bot.ban_chat_member(update.effective_chat.id, user_id)
        await update.message.reply_text(f"‚úÖ Usu√°rio {user_id} foi banido!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå Erro ao banir: {e}")

# /mute - Silenciar um usu√°rio (somente admin)
async def mute(update: Update, context: CallbackContext) -> None:
    if not await is_admin(update):
        await update.message.reply_text("‚ö†Ô∏è Voc√™ n√£o tem permiss√£o para usar este comando.")
        return

    if not context.args:
        await update.message.reply_text("‚ùå Voc√™ precisa marcar um usu√°rio ou informar um ID para silenciar.")
        return

    try:
        user_id = int(context.args[0])
        await context.bot.restrict_chat_member(
            update.effective_chat.id, user_id, ChatPermissions()
        )
        await update.message.reply_text(f"üîá Usu√°rio {user_id} foi silenciado!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå Erro ao silenciar: {e}")

# /unmute - Desmutar um usu√°rio (somente admin)
async def unmute(update: Update, context: CallbackContext) -> None:
    if not await is_admin(update):
        await update.message.reply_text("‚ö†Ô∏è Voc√™ n√£o tem permiss√£o para usar este comando.")
        return

    if not context.args:
        await update.message.reply_text("‚ùå Voc√™ precisa marcar um usu√°rio ou informar um ID para desmutar.")
        return

    try:
        user_id = int(context.args[0])
        await context.bot.restrict_chat_member(
            update.effective_chat.id, user_id, ChatPermissions(can_send_messages=True)
        )
        await update.message.reply_text(f"üîä Usu√°rio {user_id} foi desmutado!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå Erro ao desmutar: {e}")

# /warn - Avisar um usu√°rio (somente admin)
async def warn(update: Update, context: CallbackContext) -> None:
    if not await is_admin(update):
        await update.message.reply_text("‚ö†Ô∏è Voc√™ n√£o tem permiss√£o para usar este comando.")
        return

    if not context.args:
        await update.message.reply_text("‚ùå Voc√™ precisa marcar um usu√°rio ou informar um ID para avisar.")
        return

    try:
        user_id = int(context.args[0])
        await update.message.reply_text(f"‚ö†Ô∏è Aviso enviado para o usu√°rio {user_id}.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå Erro ao enviar aviso: {e}")

# /start - Iniciar o bot
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("ü§ñ Bot iniciado! Use /help para ver os comandos dispon√≠veis.")

# /regras - Mostrar as regras do chat
async def regras(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("üìú Regras do chat:\n"
                                    "1Ô∏è‚É£ Respeite todos os membros.\n"
                                    "2Ô∏è‚É£ N√£o envie links suspeitos.\n"
                                    "3Ô∏è‚É£ Proibido spam e mensagens ofensivas.\n"
                                    "4Ô∏è‚É£ Siga as diretrizes da comunidade.\n\n"
                                    "‚ùó O n√£o cumprimento pode resultar em banimento.")

# /help - Mostrar os comandos dispon√≠veis
async def help(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("‚ÑπÔ∏è Comandos dispon√≠veis:\n"
                                    "/start - Iniciar o bot\n"
                                    "/regras - Mostrar as regras do chat\n"
                                    "/ban - Banir um usu√°rio (somente admin)\n"
                                    "/mute - Silenciar um usu√°rio (somente admin)\n"
                                    "/unmute - Desmutar um usu√°rio (somente admin)\n"
                                    "/warn - Avisar um usu√°rio (somente admin)\n"
                                    "/help - Mostrar esta mensagem de ajuda")

# Fun√ß√£o principal para iniciar o bot
def iniciar_bot():
    logging.basicConfig(level=logging.INFO)
    print("Bot iniciado! Aguardando mensagens...")

    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

    if not TOKEN:
        print("Erro: O token do bot n√£o foi encontrado. Verifique o arquivo .env")
        return

    # Criando o aplicativo do bot
    app = Application.builder().token(TOKEN).build()

    # Adicionando os handlers ao bot
    app.add_handler(MessageHandler(filters.TEXT & ~filters.Command(), verificar_mensagem))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, boas_vindas))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, boas_vindas))
    app.add_handler(CommandHandler("regras", botao_clicado))

    # Adicionando handlers de comandos
    app.add_handler(CommandHandler("start", start))
    # Adiciona o handler para o comando /regras que mostra as regras do chat
    app.add_handler(CommandHandler("regras", regras))
    app.add_handler(CommandHandler("help", help))
    app.add_handler(CommandHandler("ban", ban))
    app.add_handler(CommandHandler("mute", mute))
    app.add_handler(CommandHandler("unmute", unmute))
    app.add_handler(CommandHandler("warn", warn))

    # Rodando o bot
    app.run_polling()

# Rodar o bot apenas se este arquivo for executado diretamente
if __name__ == "__main__":
    iniciar_bot()
